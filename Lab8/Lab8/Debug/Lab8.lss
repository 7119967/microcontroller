
Lab8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000378  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000135c  00000000  00000000  000003ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ba4  00000000  00000000  0000175b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ef  00000000  00000000  000022ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003a2  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000655  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000032a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000300  00000300  00000374  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.sendhalfbyte 0000002e  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.sendbyte 0000002e  0000028c  0000028c  00000300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.set_pos 00000016  000002d6  000002d6  0000034a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_ini 00000092  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.port_ini 0000000c  000002ec  000002ec  00000360  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.sendchar 00000008  000002f8  000002f8  0000036c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.str_lcd 00000038  00000226  00000226  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .progmemx.data 00000009  000000e8  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 21 .text.main    000000a2  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc  0000001c  000002ba  000002ba  0000032e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
   8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
   c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  10:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  14:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  18:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  1c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  20:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  24:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  28:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  30:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  34:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  38:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  3c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  40:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  44:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  48:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  4c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  50:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  54:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  58:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  5c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  60:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  64:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  68:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  6c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  70:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  74:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  78:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  7c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  80:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  84:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  88:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  8c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  90:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  94:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  98:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  9c:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  a0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  a4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  a8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  ac:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  b0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  b4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  b8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  bc:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  c0:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  c4:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>
  c8:	0c 94 80 01 	jmp	0x300	; 0x300 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60
  dc:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  e0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>

Disassembly of section .text:

00000300 <__bad_interrupt>:
 300:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.sendhalfbyte:

0000025e <sendhalfbyte>:
	sendhalfbyte(hc); sendhalfbyte(c);
}

void sendhalfbyte(unsigned char c)
{
	c <<= 4;
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
	e1; //включаем линию Е
 262:	95 b1       	in	r25, 0x05	; 5
 264:	92 60       	ori	r25, 0x02	; 2
 266:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	95 e8       	ldi	r25, 0x85	; 133
 26a:	9a 95       	dec	r25
 26c:	f1 f7       	brne	.-4      	; 0x26a <sendhalfbyte+0xc>
 26e:	00 00       	nop
	_delay_us(50);
	PORTA &= 0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
 270:	92 b1       	in	r25, 0x02	; 2
 272:	9f 70       	andi	r25, 0x0F	; 15
 274:	92 b9       	out	0x02, r25	; 2
	PORTA |= c;
 276:	92 b1       	in	r25, 0x02	; 2
 278:	89 2b       	or	r24, r25
 27a:	82 b9       	out	0x02, r24	; 2
	e0; //выключаем линию Е
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	85 b9       	out	0x05, r24	; 5
 282:	85 e8       	ldi	r24, 0x85	; 133
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <sendhalfbyte+0x26>
 288:	00 00       	nop
 28a:	08 95       	ret

Disassembly of section .text.sendbyte:

0000028c <sendbyte>:
	address = (0x40*y + x)|0b10000000;
	sendbyte(address, 0);
}

void sendbyte(unsigned char c, unsigned char mode)
{
 28c:	cf 93       	push	r28
 28e:	c8 2f       	mov	r28, r24
	if (mode == 0) {
 290:	61 11       	cpse	r22, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <sendbyte+0x10>
		rs0;
 294:	85 b1       	in	r24, 0x05	; 5
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	85 b9       	out	0x05, r24	; 5
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <sendbyte+0x16>
	}
	else {    
		rs1;
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	85 b9       	out	0x05, r24	; 5
	}
	unsigned char hc = 0;
	hc = c>>4;
 2a2:	8c 2f       	mov	r24, r28
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
	sendhalfbyte(hc); sendhalfbyte(c);
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
 2ae:	8c 2f       	mov	r24, r28
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
}
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

Disassembly of section .text.set_pos:

000002d6 <set_pos>:
#include <util/delay.h>

void set_pos(unsigned char x, unsigned y)
{
	char address;
	address = (0x40*y + x)|0b10000000;
 2d6:	90 e4       	ldi	r25, 0x40	; 64
 2d8:	69 9f       	mul	r22, r25
 2da:	80 0d       	add	r24, r0
 2dc:	11 24       	eor	r1, r1
 2de:	80 68       	ori	r24, 0x80	; 128
	sendbyte(address, 0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 46 01 	call	0x28c	; 0x28c <sendbyte>
 2ea:	08 95       	ret

Disassembly of section .text.LCD_ini:

00000194 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e2       	ldi	r24, 0x2F	; 47
 196:	95 e7       	ldi	r25, 0x75	; 117
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_ini+0x4>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_ini+0xa>
 19e:	00 00       	nop
}

void LCD_ini(void)
{
	_delay_ms(15);
	sendhalfbyte(0b00000011);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9f e1       	ldi	r25, 0x1F	; 31
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_ini+0x16>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_ini+0x1c>
 1b0:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	87 ec       	ldi	r24, 0xC7	; 199
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_ini+0x28>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_ini+0x2e>
 1c2:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8f ec       	ldi	r24, 0xCF	; 207
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_ini+0x3a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_ini+0x40>
 1d4:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 2f 01 	call	0x25e	; 0x25e <sendhalfbyte>
 1dc:	8f ec       	ldi	r24, 0xCF	; 207
 1de:	97 e0       	ldi	r25, 0x07	; 7
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_ini+0x4c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_ini+0x52>
 1e6:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	0e 94 46 01 	call	0x28c	; 0x28c <sendbyte>
 1f0:	8f ec       	ldi	r24, 0xCF	; 207
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_ini+0x60>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_ini+0x66>
 1fa:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	0e 94 46 01 	call	0x28c	; 0x28c <sendbyte>
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_ini+0x74>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_ini+0x7a>
 20e:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	0e 94 46 01 	call	0x28c	; 0x28c <sendbyte>
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	97 e0       	ldi	r25, 0x07	; 7
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_ini+0x88>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_ini+0x8e>
 222:	00 00       	nop
 224:	08 95       	ret

Disassembly of section .text.port_ini:

000002ec <port_ini>:
	_delay_ms(1);
}

void port_ini(void)
{
	PORTA = 0x00;
 2ec:	12 b8       	out	0x02, r1	; 2
	DDRA = 0xFF;
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	81 b9       	out	0x01, r24	; 1
	PORTB = 0x00;
 2f2:	15 b8       	out	0x05, r1	; 5
	DDRB = 0xFF;
 2f4:	84 b9       	out	0x04, r24	; 4
 2f6:	08 95       	ret

Disassembly of section .text.sendchar:

000002f8 <sendchar>:
}

void sendchar(unsigned char c)
{
	sendbyte(c,1);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	0e 94 46 01 	call	0x28c	; 0x28c <sendbyte>
 2fe:	08 95       	ret

Disassembly of section .text.str_lcd:

00000226 <str_lcd>:
}

void str_lcd (char str1[])
{
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	8c 01       	movw	r16, r24
	for (int n = 0; str1[n] !='\0'; n++)
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	09 c0       	rjmp	.+18     	; 0x248 <str_lcd+0x22>
	{
		sendchar(str1[n]);
 236:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <sendchar>
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <str_lcd+0x18>
 242:	00 c0       	rjmp	.+0      	; 0x244 <str_lcd+0x1e>
 244:	00 00       	nop
	sendbyte(c,1);
}

void str_lcd (char str1[])
{
	for (int n = 0; str1[n] !='\0'; n++)
 246:	21 96       	adiw	r28, 0x01	; 1
 248:	f8 01       	movw	r30, r16
 24a:	ec 0f       	add	r30, r28
 24c:	fd 1f       	adc	r31, r29
 24e:	80 81       	ld	r24, Z
 250:	81 11       	cpse	r24, r1
 252:	f1 cf       	rjmp	.-30     	; 0x236 <str_lcd+0x10>
	{
		sendchar(str1[n]);
		_delay_ms(10);
	}
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

Disassembly of section .text.main:

000000f2 <main>:

int main(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	29 97       	sbiw	r28, 0x09	; 9
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	f8 94       	cli
 100:	de bf       	out	0x3e, r29	; 62
 102:	0f be       	out	0x3f, r0	; 63
 104:	cd bf       	out	0x3d, r28	; 61
   	char name[] = "_Rashit_";
 106:	28 ee       	ldi	r18, 0xE8	; 232
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	89 e0       	ldi	r24, 0x09	; 9
 10e:	f9 01       	movw	r30, r18
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	74 2f       	mov	r23, r20
 116:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__movmemx_qi>

	port_ini(); //Инициализируем порты
 11a:	0e 94 76 01 	call	0x2ec	; 0x2ec <port_ini>
	LCD_ini();  //Инициализируем дисплей
 11e:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_ini>
	//set_pos(0,1);
	//str_lcd(surname);
	
	while(1) {
		// передвигаем надпись вправо
		for (int i = 0; i < (16 - sizeof(name)); i++) {
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	16 c0       	rjmp	.+44     	; 0x154 <main+0x62>
			set_pos(i,0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 2f       	mov	r24, r16
 12e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <set_pos>
			str_lcd(name);
 132:	ce 01       	movw	r24, r28
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	0e 94 13 01 	call	0x226	; 0x226 <str_lcd>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	80 e7       	ldi	r24, 0x70	; 112
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	21 50       	subi	r18, 0x01	; 1
 142:	80 40       	sbci	r24, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x4e>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x58>
 14a:	00 00       	nop
			_delay_ms(100);
			port_ini(); 
 14c:	0e 94 76 01 	call	0x2ec	; 0x2ec <port_ini>
	//set_pos(0,1);
	//str_lcd(surname);
	
	while(1) {
		// передвигаем надпись вправо
		for (int i = 0; i < (16 - sizeof(name)); i++) {
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	07 30       	cpi	r16, 0x07	; 7
 156:	11 05       	cpc	r17, r1
 158:	38 f3       	brcs	.-50     	; 0x128 <main+0x36>
 15a:	07 e0       	ldi	r16, 0x07	; 7
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	16 c0       	rjmp	.+44     	; 0x18c <main+0x9a>
			_delay_ms(100);
			port_ini(); 
		}
		// передвигаем надпись влево
		for (int i = (16 - sizeof(name)); i > 0; i--) {
			set_pos(i,0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 2f       	mov	r24, r16
 166:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <set_pos>
			str_lcd(name);
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 13 01 	call	0x226	; 0x226 <str_lcd>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	80 e7       	ldi	r24, 0x70	; 112
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x86>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x90>
 182:	00 00       	nop
			_delay_ms(100);
			port_ini(); 
 184:	0e 94 76 01 	call	0x2ec	; 0x2ec <port_ini>
			str_lcd(name);
			_delay_ms(100);
			port_ini(); 
		}
		// передвигаем надпись влево
		for (int i = (16 - sizeof(name)); i > 0; i--) {
 188:	01 50       	subi	r16, 0x01	; 1
 18a:	11 09       	sbc	r17, r1
 18c:	10 16       	cp	r1, r16
 18e:	11 06       	cpc	r1, r17
 190:	3c f3       	brlt	.-50     	; 0x160 <main+0x6e>
 192:	c7 cf       	rjmp	.-114    	; 0x122 <main+0x30>

Disassembly of section .text.libgcc:

000002ba <__movmemx_qi>:
 2ba:	99 27       	eor	r25, r25

000002bc <__movmemx_hi>:
 2bc:	77 fd       	sbrc	r23, 7
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <__movmemx_hi+0x10>
 2c0:	7b bf       	out	0x3b, r23	; 59
 2c2:	07 90       	elpm	r0, Z+
 2c4:	0d 92       	st	X+, r0
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <__movmemx_hi+0x6>
 2ca:	08 95       	ret
 2cc:	01 90       	ld	r0, Z+
 2ce:	0d 92       	st	X+, r0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <__movmemx_hi+0x10>
 2d4:	08 95       	ret
